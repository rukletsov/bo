
LIBRARY
================================================================================
* CMake different options for debug/release configuration.
* Check types compatibility (size_t, int, unsigned, etc).
* Add CMake option for GTest and, probably, Boost (consider using FindBoost).
* Implement (or find and use) global Logger class.
* Add memleak tests (check Application Verifier, Dr. Memory; CTest).

Mesh class
================================================================================
* Check algorithms and investigate speed-up possibilites (pointers, inline, etc).
* Add logging levels in operator <<().
* Make Mesh thread-safe.
* Do not add duplicated faces, edges, points.
? Do not add "close" points, e.g. which are in radius of two-three floats; 
  use existed point instead.
* Make well-designed accessor functions (see standard graph representations).
* Implement "primitive-object" for Mesh class in order to visualize a Mesh.
* Provide vertex moving function.
* Cache vertex normals.
* Check English names for mesh terms (basic graph and mesh definitions).
* Add debug assertions to out-of-range exceptions.
* Handle normalization of the null-vector.
* Write tests: out-of-range, assertions, distance, IO (using test data).

RawImage<> class
================================================================================
* Move IO-related code (RawImage<>::from_cvmat()) to "io/raw_image_io".
* Add iterator support and offset() function.
* Write tests.

Vector<> class
================================================================================
* Write tests: conversion from/to Vectors of different types; operations with
  converted vectors.

Triangle<> class
================================================================================
* Write tests.

IniReader class
================================================================================
* Replace IniReaderSettings class with traits.
* Add default sections to switches (otherwise e.g. GCC will not compile it).
* Try using fin.peek() != char_traits<char>::eof() instead of while (fin.good()).
* Write tests. 
* Add errors handling.



================================================================================
                                      ARCHIVE
================================================================================

LIBRARY
--------------------------------------------------------------------------------
[DONE] * CMake msvc compiler options.
[DONE] * Supress msvc unsafe CRT warnings.
[DONE] * Look at CMake's special functions such as FindBoost and, probably, 
  FindSTLPort.
[DONE] * add .hgeol file.
[DONE] * Create a test project (look at boost::test or Google Test Framework).  
[DONE] * Populate precompiled header with frequently used headers.
[DONE] * Rename "stdafx" to "pch" in order to make it clear.
[DONE] * Provide Timer class, which works via Performance Counters on Windows 
  and as boost::timer on all other platforms. This should replace functions 
  from "common/performance.hpp".
[DONE] * Put windows-dependent code under #ifdef.
[DONE] * Write tests for Timer class.
[DONE] * Use alternative new operator in test application for more verbose 
  memory leaks. See CRT debug heap for details.
  
RawImage<> class
--------------------------------------------------------------------------------
[DONE] * Use 1D array.
[DONE] * Provide is_null() method.

Vector<> class
--------------------------------------------------------------------------------
[DONE] * Make an n-dimensional vector based on boost::array.
[DONE] * Add useful mathematical methods, e.g. normalize(), etc.
[DONE] * Implement operator+=, operator-=, etc.
[DONE] * Test if function inlining gives some performace boost (ANSWER: more or
  less NO).
[DONE] * Rewrite min(), max(), min_index(), max_index(), sum(), product() using 
  appropriate std algorithms, such as std::min_element(), std::accumulate().
[DONE] * Consider removing precompiled headers (problems on other platforms, 
  distribute builds are not possible). Or make an option in CMake.
  
Triangle<> class
--------------------------------------------------------------------------------
[DONE] * Implement Equals() method. 
[DONE] * Implement safe at() operators.

Mesh class
--------------------------------------------------------------------------------
[DONE] * Move IO-related code: Mesh::to_ply(), Mesh::from_ply() to "io/mesh_io".
